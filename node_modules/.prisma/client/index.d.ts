
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/library.js';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model TODOList
 * 
 */
export type TODOList = $Result.DefaultSelection<Prisma.$TODOListPayload>
/**
 * Model TODOItem
 * 
 */
export type TODOItem = $Result.DefaultSelection<Prisma.$TODOItemPayload>

/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more TODOLists
 * const tODOLists = await prisma.tODOList.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  ClientOptions extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof ClientOptions ? ClientOptions['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<ClientOptions['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more TODOLists
   * const tODOLists = await prisma.tODOList.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<ClientOptions, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;


  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<"extends", Prisma.TypeMapCb, ExtArgs>

      /**
   * `prisma.tODOList`: Exposes CRUD operations for the **TODOList** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more TODOLists
    * const tODOLists = await prisma.tODOList.findMany()
    * ```
    */
  get tODOList(): Prisma.TODOListDelegate<ExtArgs>;

  /**
   * `prisma.tODOItem`: Exposes CRUD operations for the **TODOItem** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more TODOItems
    * const tODOItems = await prisma.tODOItem.findMany()
    * ```
    */
  get tODOItem(): Prisma.TODOItemDelegate<ExtArgs>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError
  export import NotFoundError = runtime.NotFoundError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql



  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics 
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 5.22.0
   * Query Engine version: 605197351a3c8bdd595af2d2a9bc3025bca48ea2
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */


  export import JsonObject = runtime.JsonObject
  export import JsonArray = runtime.JsonArray
  export import JsonValue = runtime.JsonValue
  export import InputJsonObject = runtime.InputJsonObject
  export import InputJsonArray = runtime.InputJsonArray
  export import InputJsonValue = runtime.InputJsonValue

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  type SelectAndOmit = {
    select: any
    omit: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : T extends SelectAndOmit
        ? 'Please either choose `select` or `omit`.'
        : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? K : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    TODOList: 'TODOList',
    TODOItem: 'TODOItem'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  interface TypeMapCb extends $Utils.Fn<{extArgs: $Extensions.InternalArgs, clientOptions: PrismaClientOptions }, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs'], this['params']['clientOptions']>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> = {
    meta: {
      modelProps: "tODOList" | "tODOItem"
      txIsolationLevel: Prisma.TransactionIsolationLevel
    }
    model: {
      TODOList: {
        payload: Prisma.$TODOListPayload<ExtArgs>
        fields: Prisma.TODOListFieldRefs
        operations: {
          findUnique: {
            args: Prisma.TODOListFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TODOListPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.TODOListFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TODOListPayload>
          }
          findFirst: {
            args: Prisma.TODOListFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TODOListPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.TODOListFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TODOListPayload>
          }
          findMany: {
            args: Prisma.TODOListFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TODOListPayload>[]
          }
          create: {
            args: Prisma.TODOListCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TODOListPayload>
          }
          createMany: {
            args: Prisma.TODOListCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.TODOListCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TODOListPayload>[]
          }
          delete: {
            args: Prisma.TODOListDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TODOListPayload>
          }
          update: {
            args: Prisma.TODOListUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TODOListPayload>
          }
          deleteMany: {
            args: Prisma.TODOListDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.TODOListUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.TODOListUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TODOListPayload>
          }
          aggregate: {
            args: Prisma.TODOListAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateTODOList>
          }
          groupBy: {
            args: Prisma.TODOListGroupByArgs<ExtArgs>
            result: $Utils.Optional<TODOListGroupByOutputType>[]
          }
          count: {
            args: Prisma.TODOListCountArgs<ExtArgs>
            result: $Utils.Optional<TODOListCountAggregateOutputType> | number
          }
        }
      }
      TODOItem: {
        payload: Prisma.$TODOItemPayload<ExtArgs>
        fields: Prisma.TODOItemFieldRefs
        operations: {
          findUnique: {
            args: Prisma.TODOItemFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TODOItemPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.TODOItemFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TODOItemPayload>
          }
          findFirst: {
            args: Prisma.TODOItemFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TODOItemPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.TODOItemFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TODOItemPayload>
          }
          findMany: {
            args: Prisma.TODOItemFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TODOItemPayload>[]
          }
          create: {
            args: Prisma.TODOItemCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TODOItemPayload>
          }
          createMany: {
            args: Prisma.TODOItemCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.TODOItemCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TODOItemPayload>[]
          }
          delete: {
            args: Prisma.TODOItemDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TODOItemPayload>
          }
          update: {
            args: Prisma.TODOItemUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TODOItemPayload>
          }
          deleteMany: {
            args: Prisma.TODOItemDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.TODOItemUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.TODOItemUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TODOItemPayload>
          }
          aggregate: {
            args: Prisma.TODOItemAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateTODOItem>
          }
          groupBy: {
            args: Prisma.TODOItemGroupByArgs<ExtArgs>
            result: $Utils.Optional<TODOItemGroupByOutputType>[]
          }
          count: {
            args: Prisma.TODOItemCountArgs<ExtArgs>
            result: $Utils.Optional<TODOItemCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<"define", Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *   { emit: 'stdout', level: 'query' },
     *   { emit: 'stdout', level: 'info' },
     *   { emit: 'stdout', level: 'warn' }
     *   { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
    /**
     * The default values for transactionOptions
     * maxWait ?= 2000
     * timeout ?= 5000
     */
    transactionOptions?: {
      maxWait?: number
      timeout?: number
      isolationLevel?: Prisma.TransactionIsolationLevel
    }
  }


  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'createManyAndReturn'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => $Utils.JsPromise<T>,
  ) => $Utils.JsPromise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type TODOListCountOutputType
   */

  export type TODOListCountOutputType = {
    items: number
  }

  export type TODOListCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    items?: boolean | TODOListCountOutputTypeCountItemsArgs
  }

  // Custom InputTypes
  /**
   * TODOListCountOutputType without action
   */
  export type TODOListCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TODOListCountOutputType
     */
    select?: TODOListCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * TODOListCountOutputType without action
   */
  export type TODOListCountOutputTypeCountItemsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TODOItemWhereInput
  }


  /**
   * Models
   */

  /**
   * Model TODOList
   */

  export type AggregateTODOList = {
    _count: TODOListCountAggregateOutputType | null
    _avg: TODOListAvgAggregateOutputType | null
    _sum: TODOListSumAggregateOutputType | null
    _min: TODOListMinAggregateOutputType | null
    _max: TODOListMaxAggregateOutputType | null
  }

  export type TODOListAvgAggregateOutputType = {
    id: number | null
  }

  export type TODOListSumAggregateOutputType = {
    id: number | null
  }

  export type TODOListMinAggregateOutputType = {
    id: number | null
    titre: string | null
    status: string | null
    updatedAt: Date | null
  }

  export type TODOListMaxAggregateOutputType = {
    id: number | null
    titre: string | null
    status: string | null
    updatedAt: Date | null
  }

  export type TODOListCountAggregateOutputType = {
    id: number
    titre: number
    status: number
    updatedAt: number
    _all: number
  }


  export type TODOListAvgAggregateInputType = {
    id?: true
  }

  export type TODOListSumAggregateInputType = {
    id?: true
  }

  export type TODOListMinAggregateInputType = {
    id?: true
    titre?: true
    status?: true
    updatedAt?: true
  }

  export type TODOListMaxAggregateInputType = {
    id?: true
    titre?: true
    status?: true
    updatedAt?: true
  }

  export type TODOListCountAggregateInputType = {
    id?: true
    titre?: true
    status?: true
    updatedAt?: true
    _all?: true
  }

  export type TODOListAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which TODOList to aggregate.
     */
    where?: TODOListWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TODOLists to fetch.
     */
    orderBy?: TODOListOrderByWithRelationInput | TODOListOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: TODOListWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TODOLists from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TODOLists.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned TODOLists
    **/
    _count?: true | TODOListCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: TODOListAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: TODOListSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: TODOListMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: TODOListMaxAggregateInputType
  }

  export type GetTODOListAggregateType<T extends TODOListAggregateArgs> = {
        [P in keyof T & keyof AggregateTODOList]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateTODOList[P]>
      : GetScalarType<T[P], AggregateTODOList[P]>
  }




  export type TODOListGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TODOListWhereInput
    orderBy?: TODOListOrderByWithAggregationInput | TODOListOrderByWithAggregationInput[]
    by: TODOListScalarFieldEnum[] | TODOListScalarFieldEnum
    having?: TODOListScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: TODOListCountAggregateInputType | true
    _avg?: TODOListAvgAggregateInputType
    _sum?: TODOListSumAggregateInputType
    _min?: TODOListMinAggregateInputType
    _max?: TODOListMaxAggregateInputType
  }

  export type TODOListGroupByOutputType = {
    id: number
    titre: string
    status: string
    updatedAt: Date
    _count: TODOListCountAggregateOutputType | null
    _avg: TODOListAvgAggregateOutputType | null
    _sum: TODOListSumAggregateOutputType | null
    _min: TODOListMinAggregateOutputType | null
    _max: TODOListMaxAggregateOutputType | null
  }

  type GetTODOListGroupByPayload<T extends TODOListGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<TODOListGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof TODOListGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], TODOListGroupByOutputType[P]>
            : GetScalarType<T[P], TODOListGroupByOutputType[P]>
        }
      >
    >


  export type TODOListSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    titre?: boolean
    status?: boolean
    updatedAt?: boolean
    items?: boolean | TODOList$itemsArgs<ExtArgs>
    _count?: boolean | TODOListCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["tODOList"]>

  export type TODOListSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    titre?: boolean
    status?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["tODOList"]>

  export type TODOListSelectScalar = {
    id?: boolean
    titre?: boolean
    status?: boolean
    updatedAt?: boolean
  }

  export type TODOListInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    items?: boolean | TODOList$itemsArgs<ExtArgs>
    _count?: boolean | TODOListCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type TODOListIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $TODOListPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "TODOList"
    objects: {
      items: Prisma.$TODOItemPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      titre: string
      status: string
      updatedAt: Date
    }, ExtArgs["result"]["tODOList"]>
    composites: {}
  }

  type TODOListGetPayload<S extends boolean | null | undefined | TODOListDefaultArgs> = $Result.GetResult<Prisma.$TODOListPayload, S>

  type TODOListCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<TODOListFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: TODOListCountAggregateInputType | true
    }

  export interface TODOListDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['TODOList'], meta: { name: 'TODOList' } }
    /**
     * Find zero or one TODOList that matches the filter.
     * @param {TODOListFindUniqueArgs} args - Arguments to find a TODOList
     * @example
     * // Get one TODOList
     * const tODOList = await prisma.tODOList.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends TODOListFindUniqueArgs>(args: SelectSubset<T, TODOListFindUniqueArgs<ExtArgs>>): Prisma__TODOListClient<$Result.GetResult<Prisma.$TODOListPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one TODOList that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {TODOListFindUniqueOrThrowArgs} args - Arguments to find a TODOList
     * @example
     * // Get one TODOList
     * const tODOList = await prisma.tODOList.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends TODOListFindUniqueOrThrowArgs>(args: SelectSubset<T, TODOListFindUniqueOrThrowArgs<ExtArgs>>): Prisma__TODOListClient<$Result.GetResult<Prisma.$TODOListPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first TODOList that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TODOListFindFirstArgs} args - Arguments to find a TODOList
     * @example
     * // Get one TODOList
     * const tODOList = await prisma.tODOList.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends TODOListFindFirstArgs>(args?: SelectSubset<T, TODOListFindFirstArgs<ExtArgs>>): Prisma__TODOListClient<$Result.GetResult<Prisma.$TODOListPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first TODOList that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TODOListFindFirstOrThrowArgs} args - Arguments to find a TODOList
     * @example
     * // Get one TODOList
     * const tODOList = await prisma.tODOList.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends TODOListFindFirstOrThrowArgs>(args?: SelectSubset<T, TODOListFindFirstOrThrowArgs<ExtArgs>>): Prisma__TODOListClient<$Result.GetResult<Prisma.$TODOListPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more TODOLists that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TODOListFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all TODOLists
     * const tODOLists = await prisma.tODOList.findMany()
     * 
     * // Get first 10 TODOLists
     * const tODOLists = await prisma.tODOList.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const tODOListWithIdOnly = await prisma.tODOList.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends TODOListFindManyArgs>(args?: SelectSubset<T, TODOListFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TODOListPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a TODOList.
     * @param {TODOListCreateArgs} args - Arguments to create a TODOList.
     * @example
     * // Create one TODOList
     * const TODOList = await prisma.tODOList.create({
     *   data: {
     *     // ... data to create a TODOList
     *   }
     * })
     * 
     */
    create<T extends TODOListCreateArgs>(args: SelectSubset<T, TODOListCreateArgs<ExtArgs>>): Prisma__TODOListClient<$Result.GetResult<Prisma.$TODOListPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many TODOLists.
     * @param {TODOListCreateManyArgs} args - Arguments to create many TODOLists.
     * @example
     * // Create many TODOLists
     * const tODOList = await prisma.tODOList.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends TODOListCreateManyArgs>(args?: SelectSubset<T, TODOListCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many TODOLists and returns the data saved in the database.
     * @param {TODOListCreateManyAndReturnArgs} args - Arguments to create many TODOLists.
     * @example
     * // Create many TODOLists
     * const tODOList = await prisma.tODOList.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many TODOLists and only return the `id`
     * const tODOListWithIdOnly = await prisma.tODOList.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends TODOListCreateManyAndReturnArgs>(args?: SelectSubset<T, TODOListCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TODOListPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a TODOList.
     * @param {TODOListDeleteArgs} args - Arguments to delete one TODOList.
     * @example
     * // Delete one TODOList
     * const TODOList = await prisma.tODOList.delete({
     *   where: {
     *     // ... filter to delete one TODOList
     *   }
     * })
     * 
     */
    delete<T extends TODOListDeleteArgs>(args: SelectSubset<T, TODOListDeleteArgs<ExtArgs>>): Prisma__TODOListClient<$Result.GetResult<Prisma.$TODOListPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one TODOList.
     * @param {TODOListUpdateArgs} args - Arguments to update one TODOList.
     * @example
     * // Update one TODOList
     * const tODOList = await prisma.tODOList.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends TODOListUpdateArgs>(args: SelectSubset<T, TODOListUpdateArgs<ExtArgs>>): Prisma__TODOListClient<$Result.GetResult<Prisma.$TODOListPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more TODOLists.
     * @param {TODOListDeleteManyArgs} args - Arguments to filter TODOLists to delete.
     * @example
     * // Delete a few TODOLists
     * const { count } = await prisma.tODOList.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends TODOListDeleteManyArgs>(args?: SelectSubset<T, TODOListDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more TODOLists.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TODOListUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many TODOLists
     * const tODOList = await prisma.tODOList.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends TODOListUpdateManyArgs>(args: SelectSubset<T, TODOListUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one TODOList.
     * @param {TODOListUpsertArgs} args - Arguments to update or create a TODOList.
     * @example
     * // Update or create a TODOList
     * const tODOList = await prisma.tODOList.upsert({
     *   create: {
     *     // ... data to create a TODOList
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the TODOList we want to update
     *   }
     * })
     */
    upsert<T extends TODOListUpsertArgs>(args: SelectSubset<T, TODOListUpsertArgs<ExtArgs>>): Prisma__TODOListClient<$Result.GetResult<Prisma.$TODOListPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of TODOLists.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TODOListCountArgs} args - Arguments to filter TODOLists to count.
     * @example
     * // Count the number of TODOLists
     * const count = await prisma.tODOList.count({
     *   where: {
     *     // ... the filter for the TODOLists we want to count
     *   }
     * })
    **/
    count<T extends TODOListCountArgs>(
      args?: Subset<T, TODOListCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], TODOListCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a TODOList.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TODOListAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends TODOListAggregateArgs>(args: Subset<T, TODOListAggregateArgs>): Prisma.PrismaPromise<GetTODOListAggregateType<T>>

    /**
     * Group by TODOList.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TODOListGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends TODOListGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: TODOListGroupByArgs['orderBy'] }
        : { orderBy?: TODOListGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, TODOListGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetTODOListGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the TODOList model
   */
  readonly fields: TODOListFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for TODOList.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__TODOListClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    items<T extends TODOList$itemsArgs<ExtArgs> = {}>(args?: Subset<T, TODOList$itemsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TODOItemPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the TODOList model
   */ 
  interface TODOListFieldRefs {
    readonly id: FieldRef<"TODOList", 'Int'>
    readonly titre: FieldRef<"TODOList", 'String'>
    readonly status: FieldRef<"TODOList", 'String'>
    readonly updatedAt: FieldRef<"TODOList", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * TODOList findUnique
   */
  export type TODOListFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TODOList
     */
    select?: TODOListSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TODOListInclude<ExtArgs> | null
    /**
     * Filter, which TODOList to fetch.
     */
    where: TODOListWhereUniqueInput
  }

  /**
   * TODOList findUniqueOrThrow
   */
  export type TODOListFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TODOList
     */
    select?: TODOListSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TODOListInclude<ExtArgs> | null
    /**
     * Filter, which TODOList to fetch.
     */
    where: TODOListWhereUniqueInput
  }

  /**
   * TODOList findFirst
   */
  export type TODOListFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TODOList
     */
    select?: TODOListSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TODOListInclude<ExtArgs> | null
    /**
     * Filter, which TODOList to fetch.
     */
    where?: TODOListWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TODOLists to fetch.
     */
    orderBy?: TODOListOrderByWithRelationInput | TODOListOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for TODOLists.
     */
    cursor?: TODOListWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TODOLists from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TODOLists.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of TODOLists.
     */
    distinct?: TODOListScalarFieldEnum | TODOListScalarFieldEnum[]
  }

  /**
   * TODOList findFirstOrThrow
   */
  export type TODOListFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TODOList
     */
    select?: TODOListSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TODOListInclude<ExtArgs> | null
    /**
     * Filter, which TODOList to fetch.
     */
    where?: TODOListWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TODOLists to fetch.
     */
    orderBy?: TODOListOrderByWithRelationInput | TODOListOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for TODOLists.
     */
    cursor?: TODOListWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TODOLists from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TODOLists.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of TODOLists.
     */
    distinct?: TODOListScalarFieldEnum | TODOListScalarFieldEnum[]
  }

  /**
   * TODOList findMany
   */
  export type TODOListFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TODOList
     */
    select?: TODOListSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TODOListInclude<ExtArgs> | null
    /**
     * Filter, which TODOLists to fetch.
     */
    where?: TODOListWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TODOLists to fetch.
     */
    orderBy?: TODOListOrderByWithRelationInput | TODOListOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing TODOLists.
     */
    cursor?: TODOListWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TODOLists from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TODOLists.
     */
    skip?: number
    distinct?: TODOListScalarFieldEnum | TODOListScalarFieldEnum[]
  }

  /**
   * TODOList create
   */
  export type TODOListCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TODOList
     */
    select?: TODOListSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TODOListInclude<ExtArgs> | null
    /**
     * The data needed to create a TODOList.
     */
    data: XOR<TODOListCreateInput, TODOListUncheckedCreateInput>
  }

  /**
   * TODOList createMany
   */
  export type TODOListCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many TODOLists.
     */
    data: TODOListCreateManyInput | TODOListCreateManyInput[]
  }

  /**
   * TODOList createManyAndReturn
   */
  export type TODOListCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TODOList
     */
    select?: TODOListSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many TODOLists.
     */
    data: TODOListCreateManyInput | TODOListCreateManyInput[]
  }

  /**
   * TODOList update
   */
  export type TODOListUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TODOList
     */
    select?: TODOListSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TODOListInclude<ExtArgs> | null
    /**
     * The data needed to update a TODOList.
     */
    data: XOR<TODOListUpdateInput, TODOListUncheckedUpdateInput>
    /**
     * Choose, which TODOList to update.
     */
    where: TODOListWhereUniqueInput
  }

  /**
   * TODOList updateMany
   */
  export type TODOListUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update TODOLists.
     */
    data: XOR<TODOListUpdateManyMutationInput, TODOListUncheckedUpdateManyInput>
    /**
     * Filter which TODOLists to update
     */
    where?: TODOListWhereInput
  }

  /**
   * TODOList upsert
   */
  export type TODOListUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TODOList
     */
    select?: TODOListSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TODOListInclude<ExtArgs> | null
    /**
     * The filter to search for the TODOList to update in case it exists.
     */
    where: TODOListWhereUniqueInput
    /**
     * In case the TODOList found by the `where` argument doesn't exist, create a new TODOList with this data.
     */
    create: XOR<TODOListCreateInput, TODOListUncheckedCreateInput>
    /**
     * In case the TODOList was found with the provided `where` argument, update it with this data.
     */
    update: XOR<TODOListUpdateInput, TODOListUncheckedUpdateInput>
  }

  /**
   * TODOList delete
   */
  export type TODOListDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TODOList
     */
    select?: TODOListSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TODOListInclude<ExtArgs> | null
    /**
     * Filter which TODOList to delete.
     */
    where: TODOListWhereUniqueInput
  }

  /**
   * TODOList deleteMany
   */
  export type TODOListDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which TODOLists to delete
     */
    where?: TODOListWhereInput
  }

  /**
   * TODOList.items
   */
  export type TODOList$itemsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TODOItem
     */
    select?: TODOItemSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TODOItemInclude<ExtArgs> | null
    where?: TODOItemWhereInput
    orderBy?: TODOItemOrderByWithRelationInput | TODOItemOrderByWithRelationInput[]
    cursor?: TODOItemWhereUniqueInput
    take?: number
    skip?: number
    distinct?: TODOItemScalarFieldEnum | TODOItemScalarFieldEnum[]
  }

  /**
   * TODOList without action
   */
  export type TODOListDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TODOList
     */
    select?: TODOListSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TODOListInclude<ExtArgs> | null
  }


  /**
   * Model TODOItem
   */

  export type AggregateTODOItem = {
    _count: TODOItemCountAggregateOutputType | null
    _avg: TODOItemAvgAggregateOutputType | null
    _sum: TODOItemSumAggregateOutputType | null
    _min: TODOItemMinAggregateOutputType | null
    _max: TODOItemMaxAggregateOutputType | null
  }

  export type TODOItemAvgAggregateOutputType = {
    id: number | null
    listId: number | null
  }

  export type TODOItemSumAggregateOutputType = {
    id: number | null
    listId: number | null
  }

  export type TODOItemMinAggregateOutputType = {
    id: number | null
    libelle: string | null
    status: string | null
    listId: number | null
  }

  export type TODOItemMaxAggregateOutputType = {
    id: number | null
    libelle: string | null
    status: string | null
    listId: number | null
  }

  export type TODOItemCountAggregateOutputType = {
    id: number
    libelle: number
    status: number
    listId: number
    _all: number
  }


  export type TODOItemAvgAggregateInputType = {
    id?: true
    listId?: true
  }

  export type TODOItemSumAggregateInputType = {
    id?: true
    listId?: true
  }

  export type TODOItemMinAggregateInputType = {
    id?: true
    libelle?: true
    status?: true
    listId?: true
  }

  export type TODOItemMaxAggregateInputType = {
    id?: true
    libelle?: true
    status?: true
    listId?: true
  }

  export type TODOItemCountAggregateInputType = {
    id?: true
    libelle?: true
    status?: true
    listId?: true
    _all?: true
  }

  export type TODOItemAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which TODOItem to aggregate.
     */
    where?: TODOItemWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TODOItems to fetch.
     */
    orderBy?: TODOItemOrderByWithRelationInput | TODOItemOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: TODOItemWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TODOItems from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TODOItems.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned TODOItems
    **/
    _count?: true | TODOItemCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: TODOItemAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: TODOItemSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: TODOItemMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: TODOItemMaxAggregateInputType
  }

  export type GetTODOItemAggregateType<T extends TODOItemAggregateArgs> = {
        [P in keyof T & keyof AggregateTODOItem]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateTODOItem[P]>
      : GetScalarType<T[P], AggregateTODOItem[P]>
  }




  export type TODOItemGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TODOItemWhereInput
    orderBy?: TODOItemOrderByWithAggregationInput | TODOItemOrderByWithAggregationInput[]
    by: TODOItemScalarFieldEnum[] | TODOItemScalarFieldEnum
    having?: TODOItemScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: TODOItemCountAggregateInputType | true
    _avg?: TODOItemAvgAggregateInputType
    _sum?: TODOItemSumAggregateInputType
    _min?: TODOItemMinAggregateInputType
    _max?: TODOItemMaxAggregateInputType
  }

  export type TODOItemGroupByOutputType = {
    id: number
    libelle: string
    status: string
    listId: number
    _count: TODOItemCountAggregateOutputType | null
    _avg: TODOItemAvgAggregateOutputType | null
    _sum: TODOItemSumAggregateOutputType | null
    _min: TODOItemMinAggregateOutputType | null
    _max: TODOItemMaxAggregateOutputType | null
  }

  type GetTODOItemGroupByPayload<T extends TODOItemGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<TODOItemGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof TODOItemGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], TODOItemGroupByOutputType[P]>
            : GetScalarType<T[P], TODOItemGroupByOutputType[P]>
        }
      >
    >


  export type TODOItemSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    libelle?: boolean
    status?: boolean
    listId?: boolean
    list?: boolean | TODOListDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["tODOItem"]>

  export type TODOItemSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    libelle?: boolean
    status?: boolean
    listId?: boolean
    list?: boolean | TODOListDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["tODOItem"]>

  export type TODOItemSelectScalar = {
    id?: boolean
    libelle?: boolean
    status?: boolean
    listId?: boolean
  }

  export type TODOItemInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    list?: boolean | TODOListDefaultArgs<ExtArgs>
  }
  export type TODOItemIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    list?: boolean | TODOListDefaultArgs<ExtArgs>
  }

  export type $TODOItemPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "TODOItem"
    objects: {
      list: Prisma.$TODOListPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      libelle: string
      status: string
      listId: number
    }, ExtArgs["result"]["tODOItem"]>
    composites: {}
  }

  type TODOItemGetPayload<S extends boolean | null | undefined | TODOItemDefaultArgs> = $Result.GetResult<Prisma.$TODOItemPayload, S>

  type TODOItemCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<TODOItemFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: TODOItemCountAggregateInputType | true
    }

  export interface TODOItemDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['TODOItem'], meta: { name: 'TODOItem' } }
    /**
     * Find zero or one TODOItem that matches the filter.
     * @param {TODOItemFindUniqueArgs} args - Arguments to find a TODOItem
     * @example
     * // Get one TODOItem
     * const tODOItem = await prisma.tODOItem.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends TODOItemFindUniqueArgs>(args: SelectSubset<T, TODOItemFindUniqueArgs<ExtArgs>>): Prisma__TODOItemClient<$Result.GetResult<Prisma.$TODOItemPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one TODOItem that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {TODOItemFindUniqueOrThrowArgs} args - Arguments to find a TODOItem
     * @example
     * // Get one TODOItem
     * const tODOItem = await prisma.tODOItem.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends TODOItemFindUniqueOrThrowArgs>(args: SelectSubset<T, TODOItemFindUniqueOrThrowArgs<ExtArgs>>): Prisma__TODOItemClient<$Result.GetResult<Prisma.$TODOItemPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first TODOItem that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TODOItemFindFirstArgs} args - Arguments to find a TODOItem
     * @example
     * // Get one TODOItem
     * const tODOItem = await prisma.tODOItem.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends TODOItemFindFirstArgs>(args?: SelectSubset<T, TODOItemFindFirstArgs<ExtArgs>>): Prisma__TODOItemClient<$Result.GetResult<Prisma.$TODOItemPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first TODOItem that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TODOItemFindFirstOrThrowArgs} args - Arguments to find a TODOItem
     * @example
     * // Get one TODOItem
     * const tODOItem = await prisma.tODOItem.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends TODOItemFindFirstOrThrowArgs>(args?: SelectSubset<T, TODOItemFindFirstOrThrowArgs<ExtArgs>>): Prisma__TODOItemClient<$Result.GetResult<Prisma.$TODOItemPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more TODOItems that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TODOItemFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all TODOItems
     * const tODOItems = await prisma.tODOItem.findMany()
     * 
     * // Get first 10 TODOItems
     * const tODOItems = await prisma.tODOItem.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const tODOItemWithIdOnly = await prisma.tODOItem.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends TODOItemFindManyArgs>(args?: SelectSubset<T, TODOItemFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TODOItemPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a TODOItem.
     * @param {TODOItemCreateArgs} args - Arguments to create a TODOItem.
     * @example
     * // Create one TODOItem
     * const TODOItem = await prisma.tODOItem.create({
     *   data: {
     *     // ... data to create a TODOItem
     *   }
     * })
     * 
     */
    create<T extends TODOItemCreateArgs>(args: SelectSubset<T, TODOItemCreateArgs<ExtArgs>>): Prisma__TODOItemClient<$Result.GetResult<Prisma.$TODOItemPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many TODOItems.
     * @param {TODOItemCreateManyArgs} args - Arguments to create many TODOItems.
     * @example
     * // Create many TODOItems
     * const tODOItem = await prisma.tODOItem.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends TODOItemCreateManyArgs>(args?: SelectSubset<T, TODOItemCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many TODOItems and returns the data saved in the database.
     * @param {TODOItemCreateManyAndReturnArgs} args - Arguments to create many TODOItems.
     * @example
     * // Create many TODOItems
     * const tODOItem = await prisma.tODOItem.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many TODOItems and only return the `id`
     * const tODOItemWithIdOnly = await prisma.tODOItem.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends TODOItemCreateManyAndReturnArgs>(args?: SelectSubset<T, TODOItemCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TODOItemPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a TODOItem.
     * @param {TODOItemDeleteArgs} args - Arguments to delete one TODOItem.
     * @example
     * // Delete one TODOItem
     * const TODOItem = await prisma.tODOItem.delete({
     *   where: {
     *     // ... filter to delete one TODOItem
     *   }
     * })
     * 
     */
    delete<T extends TODOItemDeleteArgs>(args: SelectSubset<T, TODOItemDeleteArgs<ExtArgs>>): Prisma__TODOItemClient<$Result.GetResult<Prisma.$TODOItemPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one TODOItem.
     * @param {TODOItemUpdateArgs} args - Arguments to update one TODOItem.
     * @example
     * // Update one TODOItem
     * const tODOItem = await prisma.tODOItem.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends TODOItemUpdateArgs>(args: SelectSubset<T, TODOItemUpdateArgs<ExtArgs>>): Prisma__TODOItemClient<$Result.GetResult<Prisma.$TODOItemPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more TODOItems.
     * @param {TODOItemDeleteManyArgs} args - Arguments to filter TODOItems to delete.
     * @example
     * // Delete a few TODOItems
     * const { count } = await prisma.tODOItem.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends TODOItemDeleteManyArgs>(args?: SelectSubset<T, TODOItemDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more TODOItems.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TODOItemUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many TODOItems
     * const tODOItem = await prisma.tODOItem.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends TODOItemUpdateManyArgs>(args: SelectSubset<T, TODOItemUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one TODOItem.
     * @param {TODOItemUpsertArgs} args - Arguments to update or create a TODOItem.
     * @example
     * // Update or create a TODOItem
     * const tODOItem = await prisma.tODOItem.upsert({
     *   create: {
     *     // ... data to create a TODOItem
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the TODOItem we want to update
     *   }
     * })
     */
    upsert<T extends TODOItemUpsertArgs>(args: SelectSubset<T, TODOItemUpsertArgs<ExtArgs>>): Prisma__TODOItemClient<$Result.GetResult<Prisma.$TODOItemPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of TODOItems.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TODOItemCountArgs} args - Arguments to filter TODOItems to count.
     * @example
     * // Count the number of TODOItems
     * const count = await prisma.tODOItem.count({
     *   where: {
     *     // ... the filter for the TODOItems we want to count
     *   }
     * })
    **/
    count<T extends TODOItemCountArgs>(
      args?: Subset<T, TODOItemCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], TODOItemCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a TODOItem.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TODOItemAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends TODOItemAggregateArgs>(args: Subset<T, TODOItemAggregateArgs>): Prisma.PrismaPromise<GetTODOItemAggregateType<T>>

    /**
     * Group by TODOItem.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TODOItemGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends TODOItemGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: TODOItemGroupByArgs['orderBy'] }
        : { orderBy?: TODOItemGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, TODOItemGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetTODOItemGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the TODOItem model
   */
  readonly fields: TODOItemFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for TODOItem.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__TODOItemClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    list<T extends TODOListDefaultArgs<ExtArgs> = {}>(args?: Subset<T, TODOListDefaultArgs<ExtArgs>>): Prisma__TODOListClient<$Result.GetResult<Prisma.$TODOListPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the TODOItem model
   */ 
  interface TODOItemFieldRefs {
    readonly id: FieldRef<"TODOItem", 'Int'>
    readonly libelle: FieldRef<"TODOItem", 'String'>
    readonly status: FieldRef<"TODOItem", 'String'>
    readonly listId: FieldRef<"TODOItem", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * TODOItem findUnique
   */
  export type TODOItemFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TODOItem
     */
    select?: TODOItemSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TODOItemInclude<ExtArgs> | null
    /**
     * Filter, which TODOItem to fetch.
     */
    where: TODOItemWhereUniqueInput
  }

  /**
   * TODOItem findUniqueOrThrow
   */
  export type TODOItemFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TODOItem
     */
    select?: TODOItemSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TODOItemInclude<ExtArgs> | null
    /**
     * Filter, which TODOItem to fetch.
     */
    where: TODOItemWhereUniqueInput
  }

  /**
   * TODOItem findFirst
   */
  export type TODOItemFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TODOItem
     */
    select?: TODOItemSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TODOItemInclude<ExtArgs> | null
    /**
     * Filter, which TODOItem to fetch.
     */
    where?: TODOItemWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TODOItems to fetch.
     */
    orderBy?: TODOItemOrderByWithRelationInput | TODOItemOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for TODOItems.
     */
    cursor?: TODOItemWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TODOItems from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TODOItems.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of TODOItems.
     */
    distinct?: TODOItemScalarFieldEnum | TODOItemScalarFieldEnum[]
  }

  /**
   * TODOItem findFirstOrThrow
   */
  export type TODOItemFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TODOItem
     */
    select?: TODOItemSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TODOItemInclude<ExtArgs> | null
    /**
     * Filter, which TODOItem to fetch.
     */
    where?: TODOItemWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TODOItems to fetch.
     */
    orderBy?: TODOItemOrderByWithRelationInput | TODOItemOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for TODOItems.
     */
    cursor?: TODOItemWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TODOItems from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TODOItems.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of TODOItems.
     */
    distinct?: TODOItemScalarFieldEnum | TODOItemScalarFieldEnum[]
  }

  /**
   * TODOItem findMany
   */
  export type TODOItemFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TODOItem
     */
    select?: TODOItemSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TODOItemInclude<ExtArgs> | null
    /**
     * Filter, which TODOItems to fetch.
     */
    where?: TODOItemWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TODOItems to fetch.
     */
    orderBy?: TODOItemOrderByWithRelationInput | TODOItemOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing TODOItems.
     */
    cursor?: TODOItemWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TODOItems from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TODOItems.
     */
    skip?: number
    distinct?: TODOItemScalarFieldEnum | TODOItemScalarFieldEnum[]
  }

  /**
   * TODOItem create
   */
  export type TODOItemCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TODOItem
     */
    select?: TODOItemSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TODOItemInclude<ExtArgs> | null
    /**
     * The data needed to create a TODOItem.
     */
    data: XOR<TODOItemCreateInput, TODOItemUncheckedCreateInput>
  }

  /**
   * TODOItem createMany
   */
  export type TODOItemCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many TODOItems.
     */
    data: TODOItemCreateManyInput | TODOItemCreateManyInput[]
  }

  /**
   * TODOItem createManyAndReturn
   */
  export type TODOItemCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TODOItem
     */
    select?: TODOItemSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many TODOItems.
     */
    data: TODOItemCreateManyInput | TODOItemCreateManyInput[]
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TODOItemIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * TODOItem update
   */
  export type TODOItemUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TODOItem
     */
    select?: TODOItemSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TODOItemInclude<ExtArgs> | null
    /**
     * The data needed to update a TODOItem.
     */
    data: XOR<TODOItemUpdateInput, TODOItemUncheckedUpdateInput>
    /**
     * Choose, which TODOItem to update.
     */
    where: TODOItemWhereUniqueInput
  }

  /**
   * TODOItem updateMany
   */
  export type TODOItemUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update TODOItems.
     */
    data: XOR<TODOItemUpdateManyMutationInput, TODOItemUncheckedUpdateManyInput>
    /**
     * Filter which TODOItems to update
     */
    where?: TODOItemWhereInput
  }

  /**
   * TODOItem upsert
   */
  export type TODOItemUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TODOItem
     */
    select?: TODOItemSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TODOItemInclude<ExtArgs> | null
    /**
     * The filter to search for the TODOItem to update in case it exists.
     */
    where: TODOItemWhereUniqueInput
    /**
     * In case the TODOItem found by the `where` argument doesn't exist, create a new TODOItem with this data.
     */
    create: XOR<TODOItemCreateInput, TODOItemUncheckedCreateInput>
    /**
     * In case the TODOItem was found with the provided `where` argument, update it with this data.
     */
    update: XOR<TODOItemUpdateInput, TODOItemUncheckedUpdateInput>
  }

  /**
   * TODOItem delete
   */
  export type TODOItemDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TODOItem
     */
    select?: TODOItemSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TODOItemInclude<ExtArgs> | null
    /**
     * Filter which TODOItem to delete.
     */
    where: TODOItemWhereUniqueInput
  }

  /**
   * TODOItem deleteMany
   */
  export type TODOItemDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which TODOItems to delete
     */
    where?: TODOItemWhereInput
  }

  /**
   * TODOItem without action
   */
  export type TODOItemDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TODOItem
     */
    select?: TODOItemSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TODOItemInclude<ExtArgs> | null
  }


  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const TODOListScalarFieldEnum: {
    id: 'id',
    titre: 'titre',
    status: 'status',
    updatedAt: 'updatedAt'
  };

  export type TODOListScalarFieldEnum = (typeof TODOListScalarFieldEnum)[keyof typeof TODOListScalarFieldEnum]


  export const TODOItemScalarFieldEnum: {
    id: 'id',
    libelle: 'libelle',
    status: 'status',
    listId: 'listId'
  };

  export type TODOItemScalarFieldEnum = (typeof TODOItemScalarFieldEnum)[keyof typeof TODOItemScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  /**
   * Field references 
   */


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'DateTime'
   */
  export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    
  /**
   * Deep Input Types
   */


  export type TODOListWhereInput = {
    AND?: TODOListWhereInput | TODOListWhereInput[]
    OR?: TODOListWhereInput[]
    NOT?: TODOListWhereInput | TODOListWhereInput[]
    id?: IntFilter<"TODOList"> | number
    titre?: StringFilter<"TODOList"> | string
    status?: StringFilter<"TODOList"> | string
    updatedAt?: DateTimeFilter<"TODOList"> | Date | string
    items?: TODOItemListRelationFilter
  }

  export type TODOListOrderByWithRelationInput = {
    id?: SortOrder
    titre?: SortOrder
    status?: SortOrder
    updatedAt?: SortOrder
    items?: TODOItemOrderByRelationAggregateInput
  }

  export type TODOListWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: TODOListWhereInput | TODOListWhereInput[]
    OR?: TODOListWhereInput[]
    NOT?: TODOListWhereInput | TODOListWhereInput[]
    titre?: StringFilter<"TODOList"> | string
    status?: StringFilter<"TODOList"> | string
    updatedAt?: DateTimeFilter<"TODOList"> | Date | string
    items?: TODOItemListRelationFilter
  }, "id">

  export type TODOListOrderByWithAggregationInput = {
    id?: SortOrder
    titre?: SortOrder
    status?: SortOrder
    updatedAt?: SortOrder
    _count?: TODOListCountOrderByAggregateInput
    _avg?: TODOListAvgOrderByAggregateInput
    _max?: TODOListMaxOrderByAggregateInput
    _min?: TODOListMinOrderByAggregateInput
    _sum?: TODOListSumOrderByAggregateInput
  }

  export type TODOListScalarWhereWithAggregatesInput = {
    AND?: TODOListScalarWhereWithAggregatesInput | TODOListScalarWhereWithAggregatesInput[]
    OR?: TODOListScalarWhereWithAggregatesInput[]
    NOT?: TODOListScalarWhereWithAggregatesInput | TODOListScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"TODOList"> | number
    titre?: StringWithAggregatesFilter<"TODOList"> | string
    status?: StringWithAggregatesFilter<"TODOList"> | string
    updatedAt?: DateTimeWithAggregatesFilter<"TODOList"> | Date | string
  }

  export type TODOItemWhereInput = {
    AND?: TODOItemWhereInput | TODOItemWhereInput[]
    OR?: TODOItemWhereInput[]
    NOT?: TODOItemWhereInput | TODOItemWhereInput[]
    id?: IntFilter<"TODOItem"> | number
    libelle?: StringFilter<"TODOItem"> | string
    status?: StringFilter<"TODOItem"> | string
    listId?: IntFilter<"TODOItem"> | number
    list?: XOR<TODOListRelationFilter, TODOListWhereInput>
  }

  export type TODOItemOrderByWithRelationInput = {
    id?: SortOrder
    libelle?: SortOrder
    status?: SortOrder
    listId?: SortOrder
    list?: TODOListOrderByWithRelationInput
  }

  export type TODOItemWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: TODOItemWhereInput | TODOItemWhereInput[]
    OR?: TODOItemWhereInput[]
    NOT?: TODOItemWhereInput | TODOItemWhereInput[]
    libelle?: StringFilter<"TODOItem"> | string
    status?: StringFilter<"TODOItem"> | string
    listId?: IntFilter<"TODOItem"> | number
    list?: XOR<TODOListRelationFilter, TODOListWhereInput>
  }, "id">

  export type TODOItemOrderByWithAggregationInput = {
    id?: SortOrder
    libelle?: SortOrder
    status?: SortOrder
    listId?: SortOrder
    _count?: TODOItemCountOrderByAggregateInput
    _avg?: TODOItemAvgOrderByAggregateInput
    _max?: TODOItemMaxOrderByAggregateInput
    _min?: TODOItemMinOrderByAggregateInput
    _sum?: TODOItemSumOrderByAggregateInput
  }

  export type TODOItemScalarWhereWithAggregatesInput = {
    AND?: TODOItemScalarWhereWithAggregatesInput | TODOItemScalarWhereWithAggregatesInput[]
    OR?: TODOItemScalarWhereWithAggregatesInput[]
    NOT?: TODOItemScalarWhereWithAggregatesInput | TODOItemScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"TODOItem"> | number
    libelle?: StringWithAggregatesFilter<"TODOItem"> | string
    status?: StringWithAggregatesFilter<"TODOItem"> | string
    listId?: IntWithAggregatesFilter<"TODOItem"> | number
  }

  export type TODOListCreateInput = {
    titre: string
    status: string
    updatedAt?: Date | string
    items?: TODOItemCreateNestedManyWithoutListInput
  }

  export type TODOListUncheckedCreateInput = {
    id?: number
    titre: string
    status: string
    updatedAt?: Date | string
    items?: TODOItemUncheckedCreateNestedManyWithoutListInput
  }

  export type TODOListUpdateInput = {
    titre?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    items?: TODOItemUpdateManyWithoutListNestedInput
  }

  export type TODOListUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    titre?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    items?: TODOItemUncheckedUpdateManyWithoutListNestedInput
  }

  export type TODOListCreateManyInput = {
    id?: number
    titre: string
    status: string
    updatedAt?: Date | string
  }

  export type TODOListUpdateManyMutationInput = {
    titre?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TODOListUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    titre?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TODOItemCreateInput = {
    libelle: string
    status: string
    list: TODOListCreateNestedOneWithoutItemsInput
  }

  export type TODOItemUncheckedCreateInput = {
    id?: number
    libelle: string
    status: string
    listId: number
  }

  export type TODOItemUpdateInput = {
    libelle?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    list?: TODOListUpdateOneRequiredWithoutItemsNestedInput
  }

  export type TODOItemUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    libelle?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    listId?: IntFieldUpdateOperationsInput | number
  }

  export type TODOItemCreateManyInput = {
    id?: number
    libelle: string
    status: string
    listId: number
  }

  export type TODOItemUpdateManyMutationInput = {
    libelle?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
  }

  export type TODOItemUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    libelle?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    listId?: IntFieldUpdateOperationsInput | number
  }

  export type IntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type DateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type TODOItemListRelationFilter = {
    every?: TODOItemWhereInput
    some?: TODOItemWhereInput
    none?: TODOItemWhereInput
  }

  export type TODOItemOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type TODOListCountOrderByAggregateInput = {
    id?: SortOrder
    titre?: SortOrder
    status?: SortOrder
    updatedAt?: SortOrder
  }

  export type TODOListAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type TODOListMaxOrderByAggregateInput = {
    id?: SortOrder
    titre?: SortOrder
    status?: SortOrder
    updatedAt?: SortOrder
  }

  export type TODOListMinOrderByAggregateInput = {
    id?: SortOrder
    titre?: SortOrder
    status?: SortOrder
    updatedAt?: SortOrder
  }

  export type TODOListSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type IntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type DateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type TODOListRelationFilter = {
    is?: TODOListWhereInput
    isNot?: TODOListWhereInput
  }

  export type TODOItemCountOrderByAggregateInput = {
    id?: SortOrder
    libelle?: SortOrder
    status?: SortOrder
    listId?: SortOrder
  }

  export type TODOItemAvgOrderByAggregateInput = {
    id?: SortOrder
    listId?: SortOrder
  }

  export type TODOItemMaxOrderByAggregateInput = {
    id?: SortOrder
    libelle?: SortOrder
    status?: SortOrder
    listId?: SortOrder
  }

  export type TODOItemMinOrderByAggregateInput = {
    id?: SortOrder
    libelle?: SortOrder
    status?: SortOrder
    listId?: SortOrder
  }

  export type TODOItemSumOrderByAggregateInput = {
    id?: SortOrder
    listId?: SortOrder
  }

  export type TODOItemCreateNestedManyWithoutListInput = {
    create?: XOR<TODOItemCreateWithoutListInput, TODOItemUncheckedCreateWithoutListInput> | TODOItemCreateWithoutListInput[] | TODOItemUncheckedCreateWithoutListInput[]
    connectOrCreate?: TODOItemCreateOrConnectWithoutListInput | TODOItemCreateOrConnectWithoutListInput[]
    createMany?: TODOItemCreateManyListInputEnvelope
    connect?: TODOItemWhereUniqueInput | TODOItemWhereUniqueInput[]
  }

  export type TODOItemUncheckedCreateNestedManyWithoutListInput = {
    create?: XOR<TODOItemCreateWithoutListInput, TODOItemUncheckedCreateWithoutListInput> | TODOItemCreateWithoutListInput[] | TODOItemUncheckedCreateWithoutListInput[]
    connectOrCreate?: TODOItemCreateOrConnectWithoutListInput | TODOItemCreateOrConnectWithoutListInput[]
    createMany?: TODOItemCreateManyListInputEnvelope
    connect?: TODOItemWhereUniqueInput | TODOItemWhereUniqueInput[]
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type TODOItemUpdateManyWithoutListNestedInput = {
    create?: XOR<TODOItemCreateWithoutListInput, TODOItemUncheckedCreateWithoutListInput> | TODOItemCreateWithoutListInput[] | TODOItemUncheckedCreateWithoutListInput[]
    connectOrCreate?: TODOItemCreateOrConnectWithoutListInput | TODOItemCreateOrConnectWithoutListInput[]
    upsert?: TODOItemUpsertWithWhereUniqueWithoutListInput | TODOItemUpsertWithWhereUniqueWithoutListInput[]
    createMany?: TODOItemCreateManyListInputEnvelope
    set?: TODOItemWhereUniqueInput | TODOItemWhereUniqueInput[]
    disconnect?: TODOItemWhereUniqueInput | TODOItemWhereUniqueInput[]
    delete?: TODOItemWhereUniqueInput | TODOItemWhereUniqueInput[]
    connect?: TODOItemWhereUniqueInput | TODOItemWhereUniqueInput[]
    update?: TODOItemUpdateWithWhereUniqueWithoutListInput | TODOItemUpdateWithWhereUniqueWithoutListInput[]
    updateMany?: TODOItemUpdateManyWithWhereWithoutListInput | TODOItemUpdateManyWithWhereWithoutListInput[]
    deleteMany?: TODOItemScalarWhereInput | TODOItemScalarWhereInput[]
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type TODOItemUncheckedUpdateManyWithoutListNestedInput = {
    create?: XOR<TODOItemCreateWithoutListInput, TODOItemUncheckedCreateWithoutListInput> | TODOItemCreateWithoutListInput[] | TODOItemUncheckedCreateWithoutListInput[]
    connectOrCreate?: TODOItemCreateOrConnectWithoutListInput | TODOItemCreateOrConnectWithoutListInput[]
    upsert?: TODOItemUpsertWithWhereUniqueWithoutListInput | TODOItemUpsertWithWhereUniqueWithoutListInput[]
    createMany?: TODOItemCreateManyListInputEnvelope
    set?: TODOItemWhereUniqueInput | TODOItemWhereUniqueInput[]
    disconnect?: TODOItemWhereUniqueInput | TODOItemWhereUniqueInput[]
    delete?: TODOItemWhereUniqueInput | TODOItemWhereUniqueInput[]
    connect?: TODOItemWhereUniqueInput | TODOItemWhereUniqueInput[]
    update?: TODOItemUpdateWithWhereUniqueWithoutListInput | TODOItemUpdateWithWhereUniqueWithoutListInput[]
    updateMany?: TODOItemUpdateManyWithWhereWithoutListInput | TODOItemUpdateManyWithWhereWithoutListInput[]
    deleteMany?: TODOItemScalarWhereInput | TODOItemScalarWhereInput[]
  }

  export type TODOListCreateNestedOneWithoutItemsInput = {
    create?: XOR<TODOListCreateWithoutItemsInput, TODOListUncheckedCreateWithoutItemsInput>
    connectOrCreate?: TODOListCreateOrConnectWithoutItemsInput
    connect?: TODOListWhereUniqueInput
  }

  export type TODOListUpdateOneRequiredWithoutItemsNestedInput = {
    create?: XOR<TODOListCreateWithoutItemsInput, TODOListUncheckedCreateWithoutItemsInput>
    connectOrCreate?: TODOListCreateOrConnectWithoutItemsInput
    upsert?: TODOListUpsertWithoutItemsInput
    connect?: TODOListWhereUniqueInput
    update?: XOR<XOR<TODOListUpdateToOneWithWhereWithoutItemsInput, TODOListUpdateWithoutItemsInput>, TODOListUncheckedUpdateWithoutItemsInput>
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedDateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type NestedIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedDateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type TODOItemCreateWithoutListInput = {
    libelle: string
    status: string
  }

  export type TODOItemUncheckedCreateWithoutListInput = {
    id?: number
    libelle: string
    status: string
  }

  export type TODOItemCreateOrConnectWithoutListInput = {
    where: TODOItemWhereUniqueInput
    create: XOR<TODOItemCreateWithoutListInput, TODOItemUncheckedCreateWithoutListInput>
  }

  export type TODOItemCreateManyListInputEnvelope = {
    data: TODOItemCreateManyListInput | TODOItemCreateManyListInput[]
  }

  export type TODOItemUpsertWithWhereUniqueWithoutListInput = {
    where: TODOItemWhereUniqueInput
    update: XOR<TODOItemUpdateWithoutListInput, TODOItemUncheckedUpdateWithoutListInput>
    create: XOR<TODOItemCreateWithoutListInput, TODOItemUncheckedCreateWithoutListInput>
  }

  export type TODOItemUpdateWithWhereUniqueWithoutListInput = {
    where: TODOItemWhereUniqueInput
    data: XOR<TODOItemUpdateWithoutListInput, TODOItemUncheckedUpdateWithoutListInput>
  }

  export type TODOItemUpdateManyWithWhereWithoutListInput = {
    where: TODOItemScalarWhereInput
    data: XOR<TODOItemUpdateManyMutationInput, TODOItemUncheckedUpdateManyWithoutListInput>
  }

  export type TODOItemScalarWhereInput = {
    AND?: TODOItemScalarWhereInput | TODOItemScalarWhereInput[]
    OR?: TODOItemScalarWhereInput[]
    NOT?: TODOItemScalarWhereInput | TODOItemScalarWhereInput[]
    id?: IntFilter<"TODOItem"> | number
    libelle?: StringFilter<"TODOItem"> | string
    status?: StringFilter<"TODOItem"> | string
    listId?: IntFilter<"TODOItem"> | number
  }

  export type TODOListCreateWithoutItemsInput = {
    titre: string
    status: string
    updatedAt?: Date | string
  }

  export type TODOListUncheckedCreateWithoutItemsInput = {
    id?: number
    titre: string
    status: string
    updatedAt?: Date | string
  }

  export type TODOListCreateOrConnectWithoutItemsInput = {
    where: TODOListWhereUniqueInput
    create: XOR<TODOListCreateWithoutItemsInput, TODOListUncheckedCreateWithoutItemsInput>
  }

  export type TODOListUpsertWithoutItemsInput = {
    update: XOR<TODOListUpdateWithoutItemsInput, TODOListUncheckedUpdateWithoutItemsInput>
    create: XOR<TODOListCreateWithoutItemsInput, TODOListUncheckedCreateWithoutItemsInput>
    where?: TODOListWhereInput
  }

  export type TODOListUpdateToOneWithWhereWithoutItemsInput = {
    where?: TODOListWhereInput
    data: XOR<TODOListUpdateWithoutItemsInput, TODOListUncheckedUpdateWithoutItemsInput>
  }

  export type TODOListUpdateWithoutItemsInput = {
    titre?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TODOListUncheckedUpdateWithoutItemsInput = {
    id?: IntFieldUpdateOperationsInput | number
    titre?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TODOItemCreateManyListInput = {
    id?: number
    libelle: string
    status: string
  }

  export type TODOItemUpdateWithoutListInput = {
    libelle?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
  }

  export type TODOItemUncheckedUpdateWithoutListInput = {
    id?: IntFieldUpdateOperationsInput | number
    libelle?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
  }

  export type TODOItemUncheckedUpdateManyWithoutListInput = {
    id?: IntFieldUpdateOperationsInput | number
    libelle?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
  }



  /**
   * Aliases for legacy arg types
   */
    /**
     * @deprecated Use TODOListCountOutputTypeDefaultArgs instead
     */
    export type TODOListCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = TODOListCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use TODOListDefaultArgs instead
     */
    export type TODOListArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = TODOListDefaultArgs<ExtArgs>
    /**
     * @deprecated Use TODOItemDefaultArgs instead
     */
    export type TODOItemArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = TODOItemDefaultArgs<ExtArgs>

  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}